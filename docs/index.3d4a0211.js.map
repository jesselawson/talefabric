{"mappings":"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","sources":["core/datamodels.ts","gamedata.ts","core/engine.ts","app.ts"],"sourcesContent":["\n\nexport enum PlayerOptionType {\n  LINK, // A link choice processes its actionList, which may or may not \n        // include a goToScenario() call\n  ROLL, // A roll choice requires a d20 roll, and has pass/fail scenarios.\n}\n\n\n/**\n * A modifier affects D20 DC rolls. These are influnced with getDCModifier and \n * setDCModifier.\n */\nexport interface DCModifier {\n  label: string, // e.g., \"Poisoned\"\n  attribute: string, // if `all`, then all DC rolls will be affected. \n  value: number    // The modifier value. Can be negative. \n}\n\n/**\n * A Player Option is part of a set of options defined in each {@link Situation | `Situation`}. \n * \n */\nexport interface PlayerOption {\n  id: string,\n\n  /**\n   * Callback function that must return a string, which will be added as the \n   * `innerHTML` of the player option.\n   */\n  text():string,\n\n  /**\n   * If the option's {@link PlayerOption.renderCondition | `Render Condition`} is \n   * set, that render condition must return `true` for this option to be rendered\n   * to the player. Otherwise, defaults to `true`.\n   */\n  renderCondition?(gameData:GameData):Boolean,\n\n  /**\n   * If given, will override what we write as history.\n  */\n  logEntry?: string,\n\n  /** \n   * If given, will not clear whole container and instead only \n   * clear THIS option (e.g., when just displaying text)\n  */\n  dontClear?: Boolean,\n\n  /** \n   * Used internally to track whether we should display this one again\n  */ \n  alreadySelected?: Boolean,\n\n  /** \n   * If provided, selecting this text will cause a dice roll. \n   * If the dice roll is >= dc, then onPass is called. \n   * If it's < dc, then onFail is called. \n   * (If dc is  not provided, onPass is called).\n  */\n  dc?: number,\n\n  /**\n   * If {@link PlayerOption.dc | `dc`} is provided, `dcAttribute` must be the \n   * attribute for which the player is making the DC check. For example, if \n   * the player is making a dex saving through, this would be `dexterity`. \n   */\n  dcAttribute?: string,\n\n  /**\n   * If true, the DC check will not show success or fail (hidden result from player)\n  */\n  hideDCResult?: boolean,\n  \n  /**\n   * The default selection behavior for this option. Selecting an option \n   * will always cause its `onPass()` function to be called, except when \n   * `dc` is set. When `dc` is set, a d20 roll against the provided `dc` \n   * will lead to **either** `onPass()` or `onFail()` being called. \n   */\n  onPass(gameData:GameData):void,\n  \n  onFail?(gameData:GameData):void\n}\n\n\nexport type SituationId = string;\n\n/**\n * A Situation is comprised of one or more {@link Block | `Content Blocks`} and associated \n * Player Options. When the Situation starts, all of the \n * content blocks are parsed then the player options are provided \n * at the end. \n */\nexport interface Situation {\n  id: SituationId,\n  \n  /**\n   * {@link Block | `Content Blocks`} are individual units of content displayed \n   * to the player when the situation starts.\n   */\n  contentBlocks: Block[],\n\n  /**\n   * Player options are the set of choices that a player is \n   * given once all the {@link Block | `Content Blocks`} are parsed. \n   */\n  playerOptions: PlayerOption[]\n}\n\nexport type GameVar = {\n  k: string;\n  v: string;\n}\n\n/**\n * A Character is used by Dialogue Content Blocks.\n */\nexport type Character = {\n  id: string;\n  name: string;\n  portrait: string;\n}\n\n/**\n * One GameData instance is equivalent to the notion of a \"saved game\". It \n * represents the player state (maybe in the middle of a game, maybe at the \n * very start) a player is experiencing as well as a saved game one might \n * load up and resume at a later time.\n*/\nexport interface GameData {\n  situations: Situation[];\n  currentSituation: SituationId;\n  characters: Character[];\n  \n  /// Title of this gameData's pack\n  title: string;\n  description: string;\n  // @todo picture: string; // a path to a photo for the game gallery\n\n  vars: GameVar[];\n\n  /**\n   * The last DC roll is always stored here so that no matter where you are in \n   * a narrative, you always know what the player rolled last. This is admitedly\n   * a poor way to implement this--but I'm very tired right now. A lot of good \n   * people have been fired or laid off and it's weighing on my conscience. \n   */\n  lastD20Roll: number;\n\n  /**\n   * Througout the game you can keep track of d20 modifiers here. \n   * The way these objects are emitted is like this:\n   * \n   *   <label> <value>\n   * \n   * The `attribute` is behind the scenes; it corresponds to the attribute that \n   * affects the roll. \n   */\n  modifiers: DCModifier[];\n}\n\nexport enum BlockFormat {\n  help = 0,\n  dialogue,\n  image\n}\n\n/**\n * A Block is a unit of \"content,\" and represents the basic building block of \n * the player's experience. A {@link Situation | `Situation`} is comprised of \n * Blocks (stored in {@link Situation.contentBlocks}) \n */\nexport interface Block {\n  /// If given, is rendered in Block\n  headingText?: Function,\n\n  /// The main text\n  text?: Function,\n\n  /**\n   * If given, will override the default rendering pipeline for this Block. \n   * The default rendering pipeline for Blocks is as follows:\n   * - First, `headingText` is rendered, if provided\n   * - Second, `text` is rendered, if provided\n   * - Third, `handwriting` is rendered, if provided\n   * \n   * If explicitly set to `dialogue`, then the following are also required:\n   * - `characterId`\n   * - `text`\n   * \n   * If explicitly set to `image`, then the following are also required:\n   * - `image`\n  */\n  format?: BlockFormat,\n\n  image?: string; \n  \n  /// If given, presents the block as handwritten text. Will always be written \n  /// after `text`.\n  handwriting?: Function,\n\n  /// If given, will point to the id of the 'characters' portrait for\n  /// this BlockFormat.dialogue format.\n  characterId?: string,\n\n  /// If given, only will render if condition is satisfied\n  renderCondition?: (gameData:GameData) => Boolean\n}\n\n","import {BlockFormat, GameData} from './core/datamodels';\nimport * as e from './core/engine';\n\nexport var gameData:GameData = {\n  title: 'Welcome to the Talefabric demo',\n  description: 'An introduction to the Talefabric interactive storytelling language.',\n  currentSituation: \"start\",\n  lastD20Roll: 1,\n  modifiers: [],\n  vars: [],\n  \n  characters: [\n    {\n      id: \"oberyn\",\n      name: \"Oberyn Firewalker\",\n      portrait: \"assets/portraits/oberyn.png\"\n    }\n  ],\n\n  situations: [\n    {\n      id: \"start\",\n      contentBlocks: [\n        {\n          headingText: ()=> `Chapter One`\n        },\n        {\n          format: BlockFormat.image,\n          image: \"assets/images/horse-and-halberd.png\"\n        },\n        {\n          text: ()=> \n            `The fire is warm and the smell of cold pine and frost pours \\\n             through one of the open windows of the Horse & Halberd, one \\\n             of the dozen taverns in the kingdom of Fallenrock.`\n        },\n        {\n          text: () => \n          `Fall has brought with it two things. The first is frigid chill each night as the wind crawls out of the mountain passes that lead out to the outer kingdoms.`\n        },\n        {\n          text: () => \n          `The second is representatives from the Court of Labor. As is predictable, they're here just as the temperatures have dropped to remind those who can't afford good housing or a meal for their children that they can always exchange a season's worth of rations for a year of their lives in the Soul Mines.`\n        },\n        {\n          text: () => `You're not here for a job, though. Not necessarily. You're here because it's been 260 lunar cycles since your birth, which means you are now at the age where you can begin studying one of the two dominant forms of magic in this realm: eon magic and sol magic.`\n        },\n        {\n          text: () => `<span><b>Eon magic</b> comes from the <i>energy of nature</i>, and is practiced by Druids.</span>`\n        },\n        {\n          format: BlockFormat.image,\n          image: \"assets/images/eon-magic.png\",\n        },\n        {\n          format: BlockFormat.help,\n          text: () => `<h6>The Druid Class</h6>\n          <p>As a Druid, your relationship to magic is one of spiritual connection. You believe that magic is something channeled through you, and  that mystical or even somewhat divine forces can move through you via your actions and words.</p>\n          <p>Druids are the only class that uses <i><b>Eon</b></i>, or <i>energy of nature</i>, magic. Eon magic includes root and vine spells, animal control spells, spirit summoning spells, and shapeshifting spells.<br/><br/>\n          Primary attributes:<br/>◐ <strong>strength</strong><br/>◑ <strong>\\\n        wisdom</strong>`\n        },\n        {\n          text: () => `<span><b>Sol magic</b> comes from the <i>spirit of life</i>, and is practiced by Sorcerers.</p></span>`\n        },\n        {\n          format: BlockFormat.image,\n          image: \"assets/images/sol-magic.png\",\n        },\n        {\n          format: BlockFormat.help,\n          text: () => `<h6>The Sorcerer Class</h6>\n          <p>As a Sorcerer, you are an expert craftsperson of magical machinations and potions. The spirit of life that runs through all things is harnessed through special machinery that you spend years studying and using.</p>\n          <p>Sorcerers are the only class that uses <i><b>Sol</b></i>, or <i>source of life</i>, magic. Sol magic includes healing spells, projectile spells, and explosive spells.<br/><br/>\n          Primary attributes:<br/>◐ <strong>dexterity</strong><br/>◑ <strong>\n          intelligence</strong>`\n        },\n        {\n          text: () => `As you enter the tavern, a slender man with long white and green hair turns, his cloak draped over and around a huge St. Bernard that's tucked up beside him. He's standing by a counter and sipping something hot from a brushed metal cup. He looks right at you.`\n        },\n        {\n          format: BlockFormat.dialogue,\n          characterId: \"oberyn\",\n          text: () => `Greetings, traveler. I am Oberyn. I sense you're here to begin your magic training. Are you here to study as a druid or as a sorcerer?`\n        },\n      ], \n      playerOptions: [\n        {\n          id: \"start_charisma\",\n          text: () => \"Take in your surroundings... Does something seem off?\",\n          dcAttribute: \"perception\",\n          dc: 12,\n          dontClear: true,\n          onPass: (gameData) =>{\n            e.writeText(\"This looks like a place that's safe to be at. For now. There's definitely a subtle feeling of alertness among the few people inside, but everyone seems to be minding their own business.\")\n          },\n          onFail: (gameData) =>{\n            // If I wanted to, I could specifically check for:\n            // if(gameData.lastd20Roll == 1) or something like that.\n            e.writeText(\"Everything about this place seems great!\")\n          }\n        },\n        {\n          id: \"start_druid\",\n          text: () => \"a druid\",\n          \n          onPass: (gameData) =>{\n            e.setVariable(gameData, 'player_class', 'druid');\n            e.setDCModifier(gameData, \"crowsense\", \"perception\", 1);\n            e.goToScenario(gameData, \"is_druid\");\n          }\n        },\n        {\n          id: \"start_sorcerer\",\n          text: () => \"a sorcerer\",\n          \n          onPass(gameData) {\n            \n          },\n        }\n      ]\n    },\n    {\n      id: \"is_druid\",\n      contentBlocks: [\n        {\n          text:() => `He looks you up and down, then nods.`\n        },\n        {\n          format: BlockFormat.dialogue,\n          characterId: \"oberyn\",\n          text: () => `The path to mastering eon magic is a long and rewarding one. Patience is key.`\n        },\n        {\n          text: () => `He reaches into his cloak and pulls out a blank piece of paper.`\n        },\n        {\n          format: BlockFormat.dialogue,\n          characterId: \"oberyn\",\n          text: () => `The Moonreader asked that I give this to you.`\n        },\n        {\n          text: () => `He hands the paper to you, and as your fingers touch it, handwritten letters begin to appear as if dissolved in reverse.`\n        },\n        {\n          handwriting: () => `<p>Young druid,</p>\n          <p>It has been two hundred and sixty full moons since your birth, so now I, the Moonreader of the Order of Eon, do call upon you to render service as a Mage.</p>\n          \n          <p>Mages provide spiritual counsel to courts and leaders everywhere, serving those around us to keep the energy of nature in balance. When druidic energy is present in high courts, better decisions are made and nature gravitates toward harmony. Where there is no druidic energy -- or worse, where there is corrupt magic -- even great heroes can plunge themselves and the souls of their people into chaos.</p>\n          \n          <p>Your first assignment is to accompany Oberyn to Pentoth. Oberyn is a friend of the Order of Eon, and while you provide counsel to the people of this realm, he will provide counsel to you. Heed his words, as the lands beyond the gates of Fallenrock are not what they used to be.</p>\n          \n          <p><i>Calliah</i></p>\n          `\n        },\n        {\n          text: () => `After you finish reading the letter, it turns to ash, then drifts away piece by piece until it's gone.`\n        },\n        {\n          format: BlockFormat.dialogue, \n          characterId: \"oberyn\",\n          text: () => `Don't worry: I already read it.`\n        },\n        {\n          text: () => `He gestures into the tavern.`\n        },\n        {\n          format: BlockFormat.dialogue, \n          characterId: \"oberyn\",\n          text: () => `Shall we begin?`\n        },\n      ],\n      playerOptions: [\n        {\n          id: `oberyn_how_long`,\n          text: () => `\"How do you know the Moonreader?\"`,\n          dontClear: true,\n          onPass(gameData) {\n            e.writeDialogue(gameData, \"oberyn\", \"I owe a great debt to the Moonreader. She and the rest of the Coven of the Crow have offered me a second chance at life, and through life, redemption.\");\n            e.remember(gameData, \"oberyn_how_long\");\n          },\n        },\n        {\n          id: `oberyn_about_the_coven`,\n          text: () => `\"Tell me about the Coven of the Crow.\"`,\n          renderCondition(gameData) {\n            return e.recall(gameData,\"oberyn_how_long\");\n          },\n          dontClear: true,\n          onPass(gameData) {\n            e.writeDialogue(gameData, \"oberyn\", \"The Coven of the Crow is the last surviving druidic coven, led by the Moonreader herself. She is who brought you here today. I am sure of it.\")\n            e.delayFn(233, function() {\n              e.writeDialogue(gameData, \"oberyn\", \"It used to be that there were many covens wherever you went. Witches and their covenkeepers could be found as far north as the outer kingdoms and as far south as the ice deserts. Over the last three-hundred years, though, a series of mysterious deaths led to the rise of tyrrant kings all set on destroying centuries of peace for centimeters of land that was stolen from the first druids.\");\n            });\n            e.remember(gameData, \"oberyn_about_the_coven\");\n          },\n        },\n        {\n          id: `oberyn_exposition`,\n          text: () => `\"That's a lot of exposition to just dump on me on my first day.\"`,\n          renderCondition(gameData) {\n            return e.recall(gameData,\"oberyn_about_the_coven\");\n          },\n          dontClear: true,\n          onPass(gameData) {\n            e.writeDialogue(gameData, \"oberyn\", \"Yes, well, our complicated world has complicated stories, doesn't it?\")\n            \n            e.remember(gameData, \"oberyn_exposition\");\n          },\n        },\n        {\n          id: `oberyn_can_i_trust_you`,\n          dontClear: true,\n          text: () => `\"How did the Moonreader know I would be here?\"`,\n          onPass(gameData) {\n            if(e.recall(gameData, \"oberyn_exposition\")) {\n              e.writeDialogue(gameData, \"oberyn\", \"Your desire for answers will serve you well, but right now, you're asking too many questions.\")\n            }\n\n            e.writeDialogue(gameData, \"oberyn\", \"When the Moonreader is chosen by the crows, they become conduits for the eon magic that lives in all creatures. She knows where you are because you know where you are; you are a creature and eon magic flows through your veins.\")\n          },\n        },\n        {\n          id: `oberyn_get_started`,\n          dontClear: true,\n          text: () => `\"How do I start?\"`,\n          onPass(gameData) {\n            e.writeDialogue(gameData, \"oberyn\", \"\")\n            e.remember(gameData, \"oberyn_get_started\")\n            //e.goToScenario(gameData, \"\")\n          },\n        },\n        {\n          id: `oberyn_lets_go`,\n          text: () => `\"Okay, I'm ready to go now.\"`,\n          renderCondition(gameData) {\n            return e.recall(gameData, \"oberyn_get_started\")\n          },\n          onPass(gameData) {\n            //e.goToScenario(gameData, \"\")\n          },\n        },\n        {\n          id: `oberyn_explore_tavern`,\n          text: () => `\"I'd like to check out the tavern a bit more first.\"`,\n          renderCondition(gameData) {\n            return e.recall(gameData, \"oberyn_get_started\")\n          },\n          onPass(gameData) {\n            //e.goToScenario(gameData, \"\")\n          },\n        }\n      ]\n    }\n  ], \n  \n}","\nimport { gameData } from \"../gamedata\";\nimport { BlockFormat, DCModifier, GameData, Situation } from \"./datamodels\";\n\n// I needed a way to keep track of the height of the screen because I wanted the \n// new elements that are created to gracefully glide onto the screen -- not appear\n// all jagged and clunky like they were doing. This is a poor way to implement \n// this but the Twitter layoffs are awful to watch in real-time. I feel so bad \n// for those families and hope everyone finds a good job. \nvar __height = 1000;\n\n//* Returns a pointer to the current situation in gameData\nfunction currentSituation(gameData:GameData):Situation|undefined {\n  for(let a=0;a<gameData.situations.length; a++) {\n    console.log(`Checking '${gameData.situations[a].id}'=='${gameData.currentSituation}'`)\n    if (String(gameData.situations[a].id) == String(gameData.currentSituation)) {\n      return gameData.situations[a];\n    }\n  }\n  return undefined;\n}\n\n/**\n * Returns the total DC modifier for the specified attribute.\n * @param gameData \n * @param attribute The attribute (e.g., `perception`) to sum modifiers for\n */\nexport function getAttributeModifiers(gameData:GameData, attribute:string):number {\n  let result = 0;\n  gameData.modifiers.filter( m => m.attribute == attribute).forEach( x => result += x.value );\n  return result;\n}\n\n/**\n * Writes the player options for the current scene \n * to the main container.\n * @param gameData The gameData instance.\n */\nexport function writePlayerOptions(gameData:GameData) {\n  let form = document.createElement('div')\n  form.id = 'player-options';\n  form.classList.remove('list-leave-active');\n  form.classList.add('playerOptionsContainer', 'list-enter-active','open', 'row', 'g-1');\n\n  // Iterate over the current situation's options and create \n  // a form field for it\n  currentSituation(gameData)?.playerOptions.filter(o => o.alreadySelected == undefined).forEach( option => {\n    if(option.renderCondition !== undefined) {\n      console.log(`Render condition found for '${option.id}' and it's '${option.renderCondition(gameData)}'`)\n      if(!option.renderCondition(gameData)) {\n        return\n      }\n    } \n\n    let maybeShowAttribute = () => {\n      if(option.dcAttribute == undefined) {\n        return \"\"\n      }\n      \n      let html = option.dcAttribute !== undefined ? '<span class=\"option-dc-attribute\">'+option.dcAttribute +' (': '';\n      let modifier = getAttributeModifiers(gameData, option.dcAttribute);\n      html += modifier < 0 ? \"-\" : \"+\";\n      html += `${(modifier)})</span>`;\n      return html\n    }\n    \n    let inputField = `\n      <span>\n      <input class=\"form-check-input\" type=\"radio\" id=\"${option.id}\" name=\"player_choice\" value=\"${option.id}\"/>\n      ${maybeShowAttribute()}\n      ${option.text()}\n      </span>\n    `;\n      let node = document.createElement('label')\n      node.htmlFor = option.id.toString();\n      \n      node.innerHTML = inputField\n      form.appendChild(node)\n      \n  })\n\n  let e = document.createElement('input');\n  e.id = \"player-confirm-button\";\n  e.classList.add('button', 'starts-invisible');\n  e.name = \"submit\";\n  e.type = \"submit\";\n  e.value = \"confirm\";\n  \n  // Here we handle the actual click:\n  e.addEventListener('click', function() {\n    handlePlayerConfirm(gameData)\n  });\n  \n  form.appendChild(e)\n  appendToMainContainer(form)\n\n  // Fix: Avoid choppy blocks \n  document.getElementById(\"container\")!.style.minHeight = document.getElementById(\"container\")!.style.minHeight + 500;\n\n  \n}\n\n/**\n * Appends an HTML element via appendChild() to the main play container\n * @param any An HTMLElement\n */\nexport function appendToMainContainer(any) {\n  document.getElementById('container')?.appendChild(any)\n}\n\nfunction writePlayerOptionHistory(e:string) {\n  writeCSSText(e, ['list-enter-active','player-option-history', 'highlight']);\n}\n\n/**\n * Spins the dice to `num`, starting on the number that \n * @param num The result the dice should land on\n */\nfunction spinDiceToResult(num:number) {\n  let die = document.getElementById('die'),\n    sides = 20,\n    initialSide = 4,\n    lastFace,\n    timeoutId,\n    transitionDuration = 1000, \n    animationDuration  = 1000\n\n  \n    clearTimeout(timeoutId)\n    die.setAttribute('data-face', num.toString());\n    \n    \n    //$('ul > li > a').removeClass('active')\n    //$('[href=' + face + ']').addClass('active')\n    \n    \n}\n\nfunction randomInt(min, max) {\n  const range = max - min + 1\n  const bytes_needed = Math.ceil(Math.log2(range) / 8)\n  const cutoff = Math.floor((256 ** bytes_needed) / range) * range\n  const bytes = new Uint8Array(bytes_needed)\n  let value\n  do {\n      crypto.getRandomValues(bytes)\n      value = bytes.reduce((acc, x, n) => acc + x * 256 ** n, 0)\n  } while (value >= cutoff)\n  return min + value % range\n}\n\n\nexport function handlePlayerConfirm(g:GameData) {\n  // Get the value\n  // Find appropriate callback function\n  // Fade out input box while fading in option history\n  var ele = <HTMLInputElement>document.querySelector('input[name=\"player_choice\"]:checked');\n  \n  // Find the right link to handle:\n  currentSituation(g)?.playerOptions.forEach( option => {\n    if(<string>option.id == <string>ele.value) {\n\n      // If we're not supposed to clear this one, mark it \n      // so that we don't!\n      if(option.dontClear !== undefined) {\n        if(option.dontClear == true) {\n          //ele.classList.add('list-enter-active')\n          option.alreadySelected = true\n        }\n      }\n\n      // @mark Until the web editor done, this is where I'm \n      //        handling the different types -- if dc exists, then \n      //        this option is treated as a DiceOption.\n      //        There are two options: Dice Option, and Option. \n\n      if(option.dc !== undefined) {\n        // @todo handle dc check\n\n        // 1. Disable player options so they fade out, fading in the player's \n        //    choice. \n        disablePlayerOptionsContainer(<string>option.text());\n\n        // 2. Get random d20 roll, and figure out which number to start the \n        //    dice on for maximum spinification.\n        let result = Math.round(randomInt(1,20))\n        \n        // 3. Fade in dice element, spinning dice, then drop the dice and fade \n        //    in the remaining stuff. It might be a little different; the FEEL \n        //    is what's important here, so be mindful of the timeout values.\n        window.setTimeout(function() {\n          let container = document.getElementById('dicebox-container');\n          container.classList.toggle('open');\n        \n          spinDiceToResult(result); // Takes 1s\n\n          window.setTimeout(function() {\n            // Write the result\n\n            // @todo (@leftoff) Figure out how to get the right data here.\n            // I think I need to add the attribute type for the d20 roll \n            // to the playeroption object as a configurable string:\n            // e.g., [ perception, attack, athletics, wisdom save, dexterity saving throw]\n            writeD20Result(g, \n              option.dcAttribute,\n              result,\n              g.modifiers.filter( m => m.attribute == option.dcAttribute)\n            );\n\n            if(result >= option.dc) {\n              window.setTimeout(function() {\n                option.onPass(g)\n              }, 233);\n            } else {\n              window.setTimeout(function() {\n                option.onFail(g)\n              }, 233);\n            }\n\n            if(option.dontClear !== undefined) {\n              if(option.dontClear) {\n                // Resume the game\n                window.setTimeout(function() {\n                  keepPlaying(g);\n                }, 233*2);\n              }\n            }\n            \n            \n            container.classList.toggle('open');\n          }, 1500)\n\n          \n\n        }, 1000);\n        \n\n\n        // 4. Based on result / dc check, transition color to either:\n        //    - Green, for success\n        //    - Red, for fail\n        //    - Purple, for mysterious\n\n\n        \n        \n        \n        \n      } else { // end check if this is option has dc or not (which would mean it's a dc check option)\n        // Hey it's not a dc check\n      \n        //clearPlayerOptionsContainer();\n        disablePlayerOptionsContainer(<string>option.text());\n\n        let delay = 2; // If we set to 1, we will fade in at the same time as the player's choice container\n        //delay++;\n        //delay++;\n        window.setTimeout(function() {\n          option.onPass(g)\n        }, 233*delay)\n        \n        delay++;\n\n        if(option.dontClear !== undefined) {\n          if(option.dontClear) {\n            // Resume the game\n            window.setTimeout(function() {\n              keepPlaying(g);\n            }, 233*delay);\n          }\n        }\n        \n      }\n    }\n  })\n}\n\nexport function writeHeading(msg) {\n  // @todo Add to state manager (the play log)\n  let h1 = document.createElement('h1');\n  h1.classList.add('mt-5');\n  h1.innerText = msg;\n  appendToMainContainer(h1)\n}\n\nexport function writeLead(msg) {\n  // @todo Add to state manager (the play log)\n  let p = document.createElement('p');\n  p.classList.add('lead');\n  p.innerText = msg;\n  appendToMainContainer(p)\n}\n\nexport function writeText(msg) {\n  writeCSSText(msg, ['list-enter-active', 'row', 'g-1']);\n}\n\n/**\n * Writes a dialogue block to the screen.\n * @param id The characterId of the speaker\n * @param msg The message\n */\nexport function writeDialogue(gameData:GameData, id:string,msg:string) {\n  let speaker = gameData.characters.find(e=>e.id == id);\n  let html = `\n  <div class=\"dialogue-box\">\n    <div class=\"col-3\">\n      <img class=\"portrait\" src=\"${speaker?.portrait}\"/>\n    </div>\n    <div class=\"col-9\">\n      <div class=\"dialogue-speaker-name\">${speaker?.name}</div>\n      <div class=\"dialogue-speaker-text\">\n        ${msg}\n      </div>\n    </div>\n  </div>`;\n  let d = document.createElement('div')\n  d.innerHTML = html;\n  d.classList.add('list-enter-active', 'row', 'g-1')\n  appendToMainContainer(d)\n}\n\n/**\n * Writes a d20 result box to the screen\n * @param id The characterId of the speaker\n * @param msg The message\n */\n export function writeD20Result(gameData:GameData, attribute: String, value:number,modifiers: DCModifier[]) {\n  \n  let html = `\n  <table class=\"d20-result-container\">\n    <tr>\n      <td class=\"attribute-name\"><span >${attribute.toUpperCase()}</span><br/>\n      <span class=\"composition-label\">rolled </span><span class=\"composition-value\">${value}</span>`;\n  \n  if(modifiers.find( m => m.attribute == attribute)) {\n    html += `<br>`\n  }\n  \n  modifiers.forEach(modifier => {\n    let row = `<span class=\"composition-label\">${modifier.label} </span><span class=\"composition-value\">${modifier.value}</span><br>`;\n    html += row;\n  });\n        \n  // Add up all the modifiers to calc the total\n  let total = value;\n  modifiers.forEach( m => total += m.value);\n  html += `</td>\n      <td class=\"attribute-value\"><span>${total}</span></td>\n    </tr>\n  </table>\n`;\n  let d = document.createElement('div')\n  d.innerHTML = html;\n  d.classList.add('list-enter-active', 'd20-result-container-container'); // \"\"You miss 100% of the shots you don't take.\" -Wayne Gretzky\" -Michael Scott\n  appendToMainContainer(d)\n}\n\n/**\n * Writes a full-width image as a block.\n * @param img Path to image. Will be width 100%.\n */\nexport function writeImage(img:string) {\n  let html = `<img class=\"full-width block-image\" src=\"${img}\"/>`;\n  let d = document.createElement('div')\n  d.innerHTML = html;\n  d.classList.add('row', 'g-0'); // Images are g-0 bc they go flush with edges of screen\n  appendToMainContainer(d)\n}\n\nexport function writeCSSText(msg,cssClasses:string[]=[]) {\n  // @todo Add to state manager (the play log)\n  let p = document.createElement('p');\n  cssClasses.forEach(cls => {\n    p.classList.add(cls);\n  });\n  p.innerHTML = msg;\n  appendToMainContainer(p)\n}\n\nexport function clearScreen() {\n  let c = document.getElementById('container');\n  let children = c?.children || {length:0};\n  if(children.length > 0) {\n    for(var i=0;i<children.length; i++) {\n      let child = children[i];\n      child.classList.remove('list-enter-active')\n      child.classList.add('list-leave-active')\n    }\n  }\n}\n\n/**\n * Wipes up the player options container, changes its text, then \n * re-wipes open the container for a fluid log of what the player chose. \n */\nfunction disablePlayerOptionsContainer(newButtonVal:string) {\n  let p = document.querySelector('#player-options')\n  let labels = p?.querySelectorAll(\":scope > label\");\n\n  labels?.forEach(label => {\n    label.classList.add('list-leave-active');\n  });\n\n  let button = document.querySelector('#player-confirm-button') as HTMLButtonElement;\n\n  button.disabled = true;\n  button.classList.add('list-leave-active');\n\n  //slideToggle(p); // .3s\n\n  window.setTimeout(function() {\n    p.innerHTML = `<p class=\"player-option-history open list-enter-active row g-1\">${newButtonVal}</p>`\n    p!.id = '';\n  },233);\n  \n  button.id = '';\n}\n\nexport function goToScenario(gameData:GameData, scenarioId:string) {\n  //console.log(`Going from '${gameData.currentSituation}' to '${scenarioId}'`)\n  gameData.currentSituation = scenarioId;\n\n  // For good measure, let's just check if that scenario even exists:\n  let found:Boolean = false;\n  console.log(gameData.situations)\n  for(let x=0;x<gameData.situations.length;x++) {\n    //console.log(`--> Checking '${gameData.situations[x].id}'...`)\n    if(gameData.situations[x].id == scenarioId) {\n      found = true;\n      break\n    }\n  }\n\n  if(!found) throw new Error(`Situation '${scenarioId}' not found!`)\n\n\n  //clearScreen();\n  renderCurrentSituation(gameData);\n}\n\nconst symbols = ['🌑','🌒','🌓','🌔','🌕','🌖','🌗','🌘']\n\nfunction randomSymbol() {\n  let result = Math.floor(Math.random() * 7 + 1)\n\n  return symbols[result]\n}\n\nfunction getPortraitUrlFromId(g:GameData,id:string) {\n  g.characters.forEach( char => {\n    if(char.id == id) {\n      return char.portrait;\n    }\n  })\n}\n\n/// Used to re-render the player options after a non-gotosituation onpass:\nexport function delayFn(delay:number,callback:Function) {\n  window.setTimeout(callback, delay);\n  \n}\n\nexport function keepPlaying(g:GameData) {\n  delayFn(500, function() {\n    writePlayerOptions(g);\n  });\n}\n\nfunction renderCurrentSituation(gameData:GameData) {\n\n  // We store the scroll height globally because we're masochists\n  let minHeight = __height + 900;\n  let newMinHeight = `${minHeight}px`\n\n  document.getElementById(\"container\").style.minHeight = newMinHeight;\n  //console.log(`Situation: ${currentSituation(gameData)?.id}`)\n  \n  // Delay fading these in\n  let delay = 0;\n  let speed = 233;\n  let noMoreDelay = false;\n  \n  currentSituation(gameData)?.contentBlocks.forEach( block => {\n    \n    // If a render condition was not provided, assume true\n    if(block.renderCondition !== undefined) {\n      if(!block.renderCondition(gameData)) {\n        return\n      }\n    } else { \n      \n      delay > 4 ? noMoreDelay = true : {}\n\n      // Is this a specially formatted block?\n      if(block.format !== undefined){\n\n        // Is this a dialogue block?\n        if(block.format == BlockFormat.dialogue \n          && block.characterId !== undefined \n          && block.text !== undefined\n          ) {\n          window.setTimeout(function() {\n            writeDialogue(gameData, block.characterId, block.text())\n          },delay*speed)\n          noMoreDelay == false ? delay++ : {}\n        \n        // Is this a image block?\n        } else if(block.format == BlockFormat.image\n          && block.image !== undefined \n          ) {\n          window.setTimeout(function() {\n            writeImage(block.image)\n          },delay*speed);\n          noMoreDelay == false ? delay++ : {}\n        \n        // Is this an OOC block?\n        } else if(block.format == BlockFormat.help) {\n          window.setTimeout(function() {\n            var additionalClasses = ['list-enter-active', 'row', 'g-1']\n            additionalClasses.push('phb-container');\n            writeCSSText(block.text(), additionalClasses)\n          },delay*speed);\n        }\n\n        \n      \n      } else { // Otherwise, process the other block formats\n\n        // Handle heading, if present:\n        if(block.headingText !== undefined) {\n          var additionalClasses = ['list-enter-active','heading-text', 'row', 'g-1']\n          window.setTimeout(function() {\n            writeCSSText(block.headingText(),additionalClasses)\n            writeCSSText(randomSymbol(), ['list-enter-active','moon', 'row', 'g-1'])\n          },delay*speed)\n          noMoreDelay == false ? delay++ : {}\n        }\n        \n        // Handle text, if present:\n        if(block.text !== undefined) {\n          var additionalClasses = ['list-enter-active', 'row', 'g-1']\n          \n          window.setTimeout(function() {\n            writeCSSText(block.text(),additionalClasses)\n          },delay*speed)\n          noMoreDelay == false ? delay++ : {}\n        }\n\n        // Handle handwriting, if present:\n        if(block.handwriting !== undefined) {\n          var additionalClasses = ['list-enter-active', 'handwriting']\n          window.setTimeout(function() {\n            writeCSSText(block.handwriting(), additionalClasses)\n          },delay*speed)\n          noMoreDelay == false ? delay++ : {}\n        }\n      }\n    }\n  })\n\n  window.setTimeout(function() {\n    writePlayerOptions(gameData)\n  }, speed*delay)\n}\n\nexport function setVariable(gameData: GameData, key: string, val: string) {\n  gameData.vars.push({k:key,v:val})\n}\n\n/**\n * Remembers a string. Recall it later with `recall():Boolean`\n * @param g GameData instance\n * @param tag The string you want to remember\n */\nexport function remember(g:GameData,tag:string) {\n  gameData.vars.push({k:tag, v:\"1\"});\n}\n\n/**\n * Returns true if we remembered the tag.\n * @param g GameData\n * @param tag The tag you remember(tag)'d\n * @returns Boolean\n */\nexport function recall(g:GameData,tag:string) {\n  return gameData.vars.filter( v => v.k == tag).length > 0 ? true : false;\n}\n\nexport function play(gameData:GameData) {\n  \n  writeHeading(gameData.title);\n  writeLead(gameData.description);\n\n  renderCurrentSituation(gameData);\n\n}\n\n/**\n * \n * @param g \n * @param attribute The difficulty check attribute that this modifier affects.\n * @param value The value to add to the existing value. \n * @param replaceValue Optional. If true, will replace the value instead of adding to whatever is there already.\n */\nexport function setDCModifier(g:GameData,label:string,attribute:string,value:number, replaceValue:boolean=false){\n  let result = g.modifiers.findIndex( m => m.attribute == attribute);\n  if(result == undefined) {\n    g.modifiers[result].value = replaceValue ? value : g.modifiers[result].value + value;\n    g.modifiers[result].label = label;\n  \n  } else {\n    // doesn't exist yet, so just push it\n    g.modifiers.push({\n      attribute: attribute, \n      value: value,\n      label: label\n    });\n  } \n}\n\n/**\n * Saves a copy of the children of the content container, and a few other things, \n * to facilitate the \"loadGame\" function. \n * @todo This is really hacky and warrants a responsible refactor\n * @param idOfContentContainer \n */\nexport function quicksave(g:GameData,idOfContentContainer:string=\"container\") {\n  \n  // PART 1: SAVE THE CONTENT CONTAINER CONTENTS\n  // ---------------------------------------------\n  // get queryselector content container\n  // for each child: \n  //  save that child in a list of children\n  // save the data to localstorage\n  \n  // PART 2: SAVE THE GAMEDATA\n  // ---------------------------------------------\n  // Save a copy of the GameData\n\n  \n\n}\n\n\n// @todo loadGame\n// just plug the container and gamedata from quicksave... will it work? \n","// Import the engine\nimport * as e from './core/engine';\n\n// Import our game's data\nimport { gameData } from './gamedata';\n\nconsole.log(`Made with <3 by Jesse's Games.`);\n\n// DrawEverything\ne.play(gameData);\n\n"],"names":["$8e1b062682a95c87$export$20a232e7e510df61","PlayerOptionType","$8e1b062682a95c87$export$dc20530e12057930","BlockFormat","$be461a995b03f271$export$b770c311badf26d4","title","description","currentSituation","lastD20Roll","modifiers","vars","characters","id","name","portrait","situations","contentBlocks","headingText","format","image","text","help","dialogue","characterId","playerOptions","dcAttribute","dc","dontClear","onPass","gameData","$0a9c07d05c3da003$export$bec150f75a9b8f11","onFail","key","val","push","k","v","$0a9c07d05c3da003$export$a6a27b1ece352148","g","label","attribute","value","replaceValue","result","findIndex","m","undefined","$0a9c07d05c3da003$export$2f3f150d5ebaf905","scenarioId","found","console","log","x","length","Error","$0a9c07d05c3da003$var$renderCurrentSituation","$0a9c07d05c3da003$export$9036bcfe137265f3","handwriting","$0a9c07d05c3da003$export$fd6c94433c086f98","$0a9c07d05c3da003$export$81b4caf1f4c1d04","renderCondition","$0a9c07d05c3da003$export$479490328e25f530","$0a9c07d05c3da003$export$2ac5c1227352a09","$0a9c07d05c3da003$var$currentSituation","a","String","$0a9c07d05c3da003$export$71a631fcdd66f396","form","document","createElement","classList","remove","add","filter","o","alreadySelected","forEach","option","inputField","html","modifier","$0a9c07d05c3da003$export$55d929d89cedfef6","maybeShowAttribute","node","htmlFor","toString","innerHTML","appendChild","e","type","addEventListener","ele","querySelector","$0a9c07d05c3da003$var$disablePlayerOptionsContainer","Math","round","min","max","range","bytes_needed","ceil","log2","cutoff","floor","bytes","Uint8Array","crypto","getRandomValues","reduce","acc","n","$0a9c07d05c3da003$var$randomInt","window","setTimeout","container","getElementById","toggle","num","timeoutId","die","clearTimeout","setAttribute","$0a9c07d05c3da003$var$spinDiceToResult","toUpperCase","find","row","total","d","$0a9c07d05c3da003$export$7a96d98d4b09d6b8","$0a9c07d05c3da003$export$1cbba9956ee1a652","$0a9c07d05c3da003$export$95c349a7e021fd7d","delay","style","minHeight","any","msg","$0a9c07d05c3da003$export$8ef3a7dd6601e91b","speaker","cssClasses","p","cls","newButtonVal","labels","querySelectorAll","button","disabled","$0a9c07d05c3da003$var$symbols","callback","speed","noMoreDelay","block","img","$0a9c07d05c3da003$export$bef49230254db878","additionalClasses","random","$0a9c07d05c3da003$var$randomSymbol","tag","h1","innerText","$0a9c07d05c3da003$export$4fb44427bd53684c","$0a9c07d05c3da003$export$72117c0039a3c15e"],"version":3,"file":"index.3d4a0211.js.map"}